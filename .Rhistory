#rgl.snapshot("1b.png","png");
#plot3d(points[1:500,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("2b.png","png");
#plot3d(points[2251:2750,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("3b.png","png");
#plot3d(points[4501:5000,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("4b.png","png");
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand3=rep(0,10);
cRand3[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand3[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
print(sprintf("Window position: %d", (i-1)*500));
}
matplot(Position, cbind(cRand1, cRand2, cRand3), type = "l", lwd = 2, lty=1:6, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC","t-afCEC"), col = 1:6, lty = 1:6, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
stream <- DSD_Memory(DSD_Benchmark(1), n = 5000);
points=as.matrix(stream$strm);
#plot(points,xlab="",ylab="",xlim=c(0,1),ylim=c(0,1),xaxt="n",yaxt="n");
#plot(points[1:500,],xlab="",ylab="",xlim=c(0,1),ylim=c(0,1),xaxt="n",yaxt="n");
#plot(points[2251:2750,],xlab="",ylab="",xlim=c(0,1),ylim=c(0,1),xaxt="n",yaxt="n");
#plot(points[4501:5000,],xlab="",ylab="",xlim=c(0,1),ylim=c(0,1),xaxt="n",yaxt="n");
labels=stream$class;
for (i in 1:length(labels)) {
if (is.na(labels[[i]])) labels[[i]]=3;
}
set.seed(0);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamBadAdditionalDimension.txt",sep=","));
points <- tmp[,1:3];
labels <- tmp[,4];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
set.seed(0);
stream <- DSD_ReadCSV("testDataStreamBadAdditionalDimension.txt",take=c(1:4),class=4);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand3=rep(0,10);
cRand3[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand3[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
print(sprintf("Window position: %d", (i-1)*500));
}
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
set.seed(0);
points=matrix(rep(0,5000*2),5000,2);
labels=rep(0,5000);
for (i in 1:5000) {
Mx1=0.125+((1-0.125)-0.125)*((i-1)/4999);
My1=0.125+((1-0.125)-0.125)*((i-1)/4999);
Mx2=0.125+((1-0.125)-0.125)*((i-1)/4999);
My2=(1-0.125)+(0.125-(1-0.125))*((i-1)/4999);
if (runif(1) <= 0.0952) {
points[i,]=runif(2);
labels[i]=NA;
} else {
if (runif(1) <= 0.5) {
points[i,]=c(Mx1+(rnorm(1)/(100/16)),My1+(rnorm(1)/100));
labels[i]=1;
} else {
points[i,]=c(Mx2+(rnorm(1)/100),My2+(rnorm(1)/(100/16)));
labels[i]=2;
}
}
}
write.table(cbind(points,labels),"testDataStreamGood.txt",sep=",",col.names=FALSE,row.names=FALSE);
set.seed(0);
points=matrix(rep(0,5000*3),5000,3);
labels=rep(0,5000);
for (i in 1:5000) {
Mx1=0.125+((1-0.125)-0.125)*((i-1)/4999);
My1=0.125+((1-0.125)-0.125)*((i-1)/4999);
Mx2=0.125+((1-0.125)-0.125)*((i-1)/4999);
My2=(1-0.125)+(0.125-(1-0.125))*((i-1)/4999);
if (runif(1) <= 0.0952) {
points[i,1:2]=runif(2);
labels[i]=NA;
} else {
if (runif(1) <= 0.5) {
points[i,1:2]=c(Mx1+(rnorm(1)/(100/16)),My1+(rnorm(1)/100));
labels[i]=1;
} else {
points[i,1:2]=c(Mx2+(rnorm(1)/100),My2+(rnorm(1)/(100/16)));
labels[i]=2;
}
}
points[i,3]=i;
}
write.table(cbind(points,labels),"testDataStreamGoodAdditionalDimension.txt",sep=",",col.names=FALSE,row.names=FALSE);
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGood.txt",sep=","));
points <- tmp[,1:2];
plot(points,xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
plot(points[1:500,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
plot(points[2251:2750,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
plot(points[4501:5000,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGood.txt",take=c(1:3),class=3);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
tmp <- as.matrix(read.table("testDataStreamGoodAdditionalDimension.txt",sep=","));
points <- tmp[,1:3];
labels <- tmp[,4];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
plot3d(points,xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
library(rgl)
plot3d(points,xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
rgl.snapshot("1b.png","png");
plot3d(points[1:500,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
rgl.snapshot("2b.png","png");
plot3d(points[2251:2750,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
rgl.snapshot("3b.png","png");
plot3d(points[4501:5000,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
rgl.snapshot("4b.png","png");
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand3=rep(0,10);
cRand3[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand3[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
print(sprintf("Window position: %d", (i-1)*500));
}
matplot(Position, cbind(cRand1, cRand2, cRand3), type = "l", lwd = 2, lty=1:6, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC","t-afCEC"), col = 1:6, lty = 1:6, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGood.txt",sep=","));
points <- tmp[,1:2];
#plot(points,xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[1:200,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[2401:2600,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[4801:5000,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGood.txt",sep=","));
points <- tmp[,1:2];
#plot(points,xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[1:200,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[2401:2600,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[4801:5000,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGood.txt",take=c(1:3),class=3);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
library(rgl);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGoodAdditionalDimension.txt",sep=","));
points <- tmp[,1:3];
labels <- tmp[,4];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
#plot3d(points,xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("1b.png","png");
#plot3d(points[1:500,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("2b.png","png");
#plot3d(points[2251:2750,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("3b.png","png");
#plot3d(points[4501:5000,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("4b.png","png");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGoodAdditionalDimension.txt",take=c(1:4),class=4);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
library(rgl);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGoodAdditionalDimension.txt",sep=","));
points <- tmp[,1:3];
labels <- tmp[,4];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
#plot3d(points,xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("1b.png","png");
#plot3d(points[1:500,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("2b.png","png");
#plot3d(points[2251:2750,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("3b.png","png");
#plot3d(points[4501:5000,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("4b.png","png");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGoodAdditionalDimension.txt",take=c(1:4),class=4);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
cRand2
cRand1
library(afCEC);
library(mclust);
library(stream);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGood.txt",sep=","));
points <- tmp[,1:2];
#plot(points,xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[1:200,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[2401:2600,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
#plot(points[4801:5000,],xlab="",ylab="",xlim=c(-0.5,1.5),ylim=c(-0.5,1.5),xaxt="n",yaxt="n");
labels <- tmp[,3];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
plot(res,draw_means=FALSE);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGood.txt",take=c(1:3),class=3);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
library(afCEC);
library(mclust);
library(stream);
library(rgl);
set.seed(0);
tmp <- as.matrix(read.table("testDataStreamGoodAdditionalDimension.txt",sep=","));
points <- tmp[,1:3];
labels <- tmp[,4];
for (i in 1:5000) {
if (is.na(labels[i])) labels[i]=3;
}
#plot3d(points,xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("1b.png","png");
#plot3d(points[1:500,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("2b.png","png");
#plot3d(points[2251:2750,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("3b.png","png");
#plot3d(points[4501:5000,],xlab="",ylab="",zlab="",xaxt="n",yaxt="n",zaxt="n");
#rgl.snapshot("4b.png","png");
maxClusters=3;
starts=10;
res <- afCEC(points[1:500,],maxClusters,"k-means++",0.01,0,1000,starts,"Hartigan","quadratic");
cRand2=rep(0,10);
cRand2[1]=adjustedRandIndex(labels[1:500],res$labels);
for (i in 2:10) {
for (j in 1:500) {
res=removePoint(res,1);
res=addPoint(res,points[((i-1)*500)+j,]);
}
res <- afCEC(res$data[1:500,],maxClusters,as.integer(matrix(c(res$labels),length(res$labels),1)),0.01,0,1000,1,"Hartigan","quadratic");
cRand2[i]=adjustedRandIndex(labels[(((i-1)*500)+1):(((i-1)*500)+500)],res$labels);
print(sprintf("Window position: %d", (i-1)*500));
}
stream <- DSD_ReadCSV("testDataStreamGoodAdditionalDimension.txt",take=c(1:4),class=4);
algorithms <- list(
'Sample' = DSC_TwoStage(micro = DSC_Sample(k = 500, biased = TRUE), macro = DSC_Kmeans(k = 3)),
'Window' = DSC_TwoStage(micro = DSC_Window(horizon = 500, lambda = .01), macro = DSC_Kmeans(k = 3)),
'D-Stream' = DSC_DStream(gridsize = .1, lambda = .01),
'DBSTREAM' = DSC_DBSTREAM(r = .05, lambda = .01)
);
evaluation <- lapply(algorithms, FUN = function(a) {
reset_stream(stream);
evaluate_cluster(a, stream, horizon = 500, n = 5000, measure = "crand", type = "macro", assign = "micro");
});
Position <- evaluation[[1]][ , "points"];
cRand1 <- sapply(evaluation, FUN = function(x) x[ , "cRand"]);
matplot(Position, cbind(cRand1, cRand2), type = "l", lwd = 2, lty=1:5, xlab="", ylab="");
legend("bottomleft", legend = c(names(evaluation),"afCEC"), col = 1:5, lty = 1:5, bty = "n", seg.len = 1, lwd = 2, cex=0.7);
