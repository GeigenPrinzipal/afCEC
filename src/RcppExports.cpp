// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GenerateCodeForArrayConstruction
std::string GenerateCodeForArrayConstruction(std::string& formula);
RcppExport SEXP afCEC_GenerateCodeForArrayConstruction(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateCodeForArrayConstruction(formula));
    return rcpp_result_gen;
END_RCPP
}
// UpdateMeansForQuadraticFunction
void UpdateMeansForQuadraticFunction(Rcpp::List& res);
RcppExport SEXP afCEC_UpdateMeansForQuadraticFunction(SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type res(resSEXP);
    UpdateMeansForQuadraticFunction(res);
    return R_NilValue;
END_RCPP
}
// GenerateCodeForUpdatingMeans
std::string GenerateCodeForUpdatingMeans(std::string& formula);
RcppExport SEXP afCEC_GenerateCodeForUpdatingMeans(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateCodeForUpdatingMeans(formula));
    return rcpp_result_gen;
END_RCPP
}
// CalculateEllipsesOfConfidenceForQuadraticFunction
Rcpp::List CalculateEllipsesOfConfidenceForQuadraticFunction(Rcpp::List res, double confidence, int segments);
RcppExport SEXP afCEC_CalculateEllipsesOfConfidenceForQuadraticFunction(SEXP resSEXP, SEXP confidenceSEXP, SEXP segmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type confidence(confidenceSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(CalculateEllipsesOfConfidenceForQuadraticFunction(res, confidence, segments));
    return rcpp_result_gen;
END_RCPP
}
// GenerateCodeForCalculatingEllipsesOfConfidence
std::string GenerateCodeForCalculatingEllipsesOfConfidence(std::string& formula);
RcppExport SEXP afCEC_GenerateCodeForCalculatingEllipsesOfConfidence(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateCodeForCalculatingEllipsesOfConfidence(formula));
    return rcpp_result_gen;
END_RCPP
}
// CalculateEllipsoidsOfConfidenceForQuadraticFunction
Rcpp::List CalculateEllipsoidsOfConfidenceForQuadraticFunction(Rcpp::List res, double confidence, int gridRes);
RcppExport SEXP afCEC_CalculateEllipsoidsOfConfidenceForQuadraticFunction(SEXP resSEXP, SEXP confidenceSEXP, SEXP gridResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type confidence(confidenceSEXP);
    Rcpp::traits::input_parameter< int >::type gridRes(gridResSEXP);
    rcpp_result_gen = Rcpp::wrap(CalculateEllipsoidsOfConfidenceForQuadraticFunction(res, confidence, gridRes));
    return rcpp_result_gen;
END_RCPP
}
// GenerateCodeForCalculatingEllipsoidsOfConfidence
std::string GenerateCodeForCalculatingEllipsoidsOfConfidence(std::string& formula);
RcppExport SEXP afCEC_GenerateCodeForCalculatingEllipsoidsOfConfidence(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateCodeForCalculatingEllipsoidsOfConfidence(formula));
    return rcpp_result_gen;
END_RCPP
}
// afCECCppRoutine
Rcpp::List afCECCppRoutine(const arma::mat& points, int maxClusters, const SEXP& initialLabels, double cardMin, double costThreshold, int minIterations, int maxIterations, int numberOfStarts, const std::string& method, const arma::mat& values, bool interactive);
RcppExport SEXP afCEC_afCECCppRoutine(SEXP pointsSEXP, SEXP maxClustersSEXP, SEXP initialLabelsSEXP, SEXP cardMinSEXP, SEXP costThresholdSEXP, SEXP minIterationsSEXP, SEXP maxIterationsSEXP, SEXP numberOfStartsSEXP, SEXP methodSEXP, SEXP valuesSEXP, SEXP interactiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< int >::type maxClusters(maxClustersSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type initialLabels(initialLabelsSEXP);
    Rcpp::traits::input_parameter< double >::type cardMin(cardMinSEXP);
    Rcpp::traits::input_parameter< double >::type costThreshold(costThresholdSEXP);
    Rcpp::traits::input_parameter< int >::type minIterations(minIterationsSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< int >::type numberOfStarts(numberOfStartsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type interactive(interactiveSEXP);
    rcpp_result_gen = Rcpp::wrap(afCECCppRoutine(points, maxClusters, initialLabels, cardMin, costThreshold, minIterations, maxIterations, numberOfStarts, method, values, interactive));
    return rcpp_result_gen;
END_RCPP
}
// RandIndex
double RandIndex(std::vector<int> labels1, std::vector<int> labels2, int maxClusters1, int maxClusters2);
RcppExport SEXP afCEC_RandIndex(SEXP labels1SEXP, SEXP labels2SEXP, SEXP maxClusters1SEXP, SEXP maxClusters2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type labels1(labels1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type labels2(labels2SEXP);
    Rcpp::traits::input_parameter< int >::type maxClusters1(maxClusters1SEXP);
    Rcpp::traits::input_parameter< int >::type maxClusters2(maxClusters2SEXP);
    rcpp_result_gen = Rcpp::wrap(RandIndex(labels1, labels2, maxClusters1, maxClusters2));
    return rcpp_result_gen;
END_RCPP
}
// JaccardIndex
double JaccardIndex(std::vector<int> labels1, std::vector<int> labels2, int maxClusters1, int maxClusters2);
RcppExport SEXP afCEC_JaccardIndex(SEXP labels1SEXP, SEXP labels2SEXP, SEXP maxClusters1SEXP, SEXP maxClusters2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type labels1(labels1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type labels2(labels2SEXP);
    Rcpp::traits::input_parameter< int >::type maxClusters1(maxClusters1SEXP);
    Rcpp::traits::input_parameter< int >::type maxClusters2(maxClusters2SEXP);
    rcpp_result_gen = Rcpp::wrap(JaccardIndex(labels1, labels2, maxClusters1, maxClusters2));
    return rcpp_result_gen;
END_RCPP
}
// SampleMeshUniform
arma::mat SampleMeshUniform(std::string fName, int pointsNum);
RcppExport SEXP afCEC_SampleMeshUniform(SEXP fNameSEXP, SEXP pointsNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fName(fNameSEXP);
    Rcpp::traits::input_parameter< int >::type pointsNum(pointsNumSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleMeshUniform(fName, pointsNum));
    return rcpp_result_gen;
END_RCPP
}
