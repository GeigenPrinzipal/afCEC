plot(pts+matrix(rep(c(2,0),200),200,2,byrow=TRUE),pch=20)
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
plot(points,pch=20)
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
plot(result);
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
plot(result);
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
plot(result);
labels
RandIndex(labels,result->labels)
RandIndex(labels,result->labels,2,2)
result->labels
result
RandIndex(labels,result$labels,2,2)
result$labels
RandIndex(labels,as.integer(result$labels),2,2)
RandIndex(as.integer(labels),as.integer(result$labels),2,2)
typeof
typeof(1)
typeof(labels)
typeof(result$labels)
result$labels
c(result$labels,2)
c(c(1,2),c(3,4))
labels
labels
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
labels
RandIndex(labels,result$labels,2,2)
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
RandIndex(labels, result$labels, 2, 2);
plot(result)
print(cat("aaa",2))
print(paste("a","b"))
print(paste("a","b",sep=""))
print(paste("a","b",3,sep=""))
print(paste("a","b",c(3,4),sep=""))
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
ri <- RandIndex(labels, result$labels);
print(paste("The Rand index between the model clustering and the clustering obtained by the afCEC function is: ", ri, ".", sep=""));
ri
library(afCEC);
points1 <- SampleBallUniform(1000, 2);
points2 <- (SampleBallUniform(2000, 2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1, points2);
labels <- c(rep(0,1000), rep(1,2000));
result <- afCEC(points, 2);
ri <- RandIndex(labels, result$labels, 2, 2);
print(paste("The Rand index between the model clustering and the clustering obtained by the afCEC function is: ", ri, ".", sep=""));
library(afCEC);
points1 <- SampleBallUniform(1000,2);
points2 <- (SampleBallUniform(2000,2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1,points2);
labels <- c(rep(0,1000),rep(1,2000));
result <- afCEC(points,2);
ri <- RandIndex(labels,result$labels,2,2);
print(
paste(
"The Jaccard index between the model clustering and the clustering obtained by the ",
"afCEC function is: ",
ri,
".",
sep=""
)
);
library(afCEC);
points1 <- SampleBallUniform(1000,2);
points2 <- (SampleBallUniform(2000,2)*2) + matrix(rep(c(2,0),2000),2000,2,byrow=TRUE);
points <- rbind(points1,points2);
labels <- c(rep(0,1000),rep(1,2000));
result <- afCEC(points,2);
ri <- JaccardIndex(labels,result$labels,2,2);
print(
paste(
"The Jaccard index between the model clustering and the clustering obtained by the ",
"afCEC function is: ",
ri,
".",
sep=""
)
);
library(afCEC)
library(afCEC);
data(dog);
result <- afCEC(airplane, 7, values="quadratic");
library(afCEC);
data(dog);
result <- afCEC(dog, 7, values="quadratic");
plot(result)
library(afCEC);
data(dog);
result <- afCEC(dog, 7, values="quadratic", method="Lloyd");
plot(result)
library(afCEC);
data(dog);
result <- afCEC(dog, 7, values="quadratic", method="Lloyd", labels="random");
library(afCEC);
data(dog);
result <- afCEC(dog, 7, values="quadratic", method="Lloyd", initialLabels="random");
plot(result)
library(afCEC);
data(airplane);
formula = paste(
"f:R^2 -> R^5\n",
"f^1(x) = x(1)^2\n",
"f^2(x) = x(2)^2\n",
"f^3(x) = x(1)\n",
"f^4(x) = x(2)\n",
"f^5(x) = 1\n",
sep=""
);
result <- afCEC(airplane, 17, values=formula, numberOfStarts=1)
2+2
result
plot(result)
plot(result)
library(afCEC)
library(afCEC)
afCEC
library(afCEC)
library(afCEC);
data(airplane);
result <- afCEC(airplane, 17, numberOfStarts=1);
plot(result);
library(afCEC)
iris
iris[1:50]
iris[1:50,]
iris[1:50,1:4]
iris[1:50,1:1]
library(afCEC)
lab=c(rep(0,(dim(iris)[1])/3),rep(1,(dim(iris)[1])/3),rep(2,(dim(iris)[1])/3))
lab
dim(lab)
size(lab)
length(lab)
lab=matrix(lab,150,1,BYROW=TRUE)
lab=matrix(lab,150,1,byrow=TRUE)
lab
dim(lab)
afCEC(as.matrix(iris[,1:2]),maxClusters=3,numberOfStarts=1,initialLabels=matrix(lab, dim(iris)[1]))
afCEC(as.matrix(iris[,1:2]),maxClusters=3,numberOfStarts=1,initialLabels=lab)
afCEC(as.matrix(iris[,1:4]),maxClusters=3,numberOfStarts=1,initialLabels=lab)
afCEC(as.matrix(iris[,1:4]),maxClusters=3,numberOfStarts=1,initialLabels=as.integer(lab))
dim(iris)
dim(iris)[1]
library(afCEC);
lab=c(rep(0,(dim(iris)[1])/3),rep(1,(dim(iris)[1])/3),rep(2,(dim(iris)[1])/3));
lab=as.integer(matrix(lab,length(lab),1,byrow=TRUE));
afCEC(as.matrix(iris[,1:2]),maxClusters=3,numberOfStarts=1,initialLabels=lab)
library(afCEC);
lab=c(rep(0,(dim(iris)[1])/3),rep(1,(dim(iris)[1])/3),rep(2,(dim(iris)[1])/3));
lab=as.integer(matrix(lab,length(lab),1,byrow=TRUE));
res=afCEC(as.matrix(iris[,1:2]),maxClusters=3,numberOfStarts=1,initialLabels=lab);
plot(res)
library(afCEC);
lab=c(rep(0,(dim(iris)[1])/3),rep(1,(dim(iris)[1])/3),rep(2,(dim(iris)[1])/3));
lab=as.integer(matrix(lab,length(lab),1,byrow=TRUE));
res=afCEC(as.matrix(iris[,1:2]),maxClusters=3,numberOfStarts=1,initialLabels=lab);
plot(res);
library(afCEC)
library(afCEC)
RandIndex(c(1,2,3),c(4,5,6))
RandIndex
RandIndex()
librafy(afCEC)
library(afCEC)
RandIndex
RandIndex(c(1,2,3),c(5,6,7))
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC);
data(fire);
res<-afCEC(fire);
library(afCEC)
CaculateEllipsesOfConfidenceForQuadraticFunction'
'CalculateEllipsoidsOfConfidenceForQuadraticFunction'
'GenerateCodeForArrayConstruction'
'GenerateCodeForCalculatingEllipsesOfConfidence'
'GenerateCodeForCalculatingEllipsoidsOfConfidence'
'GenerateCodeForUpdatingMeans' 'UpdateMeansForQuadraticFunction'
'afCECCppRoutine' 'plot.afCEC'
data(dog)
res<-afCEC(dog)
res<-afCEC(dog,5)
library(afCEC)
res<-afCEC(dog,5)
plot(res)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
data(dog)
plot(dog)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
library(afCEC)
.Call(afCECCppRoutine)
.Call(afCECCppRoutine)
library(afCEC)
library(afCEC)
afCEC
library(afCEC)
afCEC
data(dog)
afCEC(dog,50
)
library(afCEC)
.Call('afCEC_afCECCppRoutine', PACKAGE = 'afCEC')
library(afCEC)
.Call(afCEC_afCECCppRoutine)
.Call('afCEC_afCECCppRoutine')
.Call('afCEC_afCECCppRoutine', package='afCEC')
.Call(afCEC_afCECCppRoutine, package='afCEC')
.Call('afCEC_afCECCppRoutine', package='afCEC')
.Call('afCECCppRoutine', package='afCEC')
.Call(afCECCppRoutine, package='afCEC')
.Call(afCECCppRoutine, package="afCEC")
library(afCEC)
.Call(double_me2)
.Call('double_me2')
library(afCEC)
mul2
.Call(mul2)
.Call('mul2')
.Call(mul2, package='afCEC")
)
z
zxc
sc
//   -*-   -*-   -*-
sdf
dsf;sldfl
exit
;;
sfdsfsdf\
.Call(mul2,package="afCEC")
export()
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(res)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(res)
library(afCEC)
.Call('afCEC_GenerateCodeForArrayConstruction', PACKAGE = 'afCEC')
.Call('afCEC_Szpula', PACKAGE = 'afCEC')
.Call('afCEC_Szpula')
.Call('afCEC_Szpula', PACKAGE = 'afCEC', 2)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(res)
afCECCppRoutine
library(afCEC)
library(afCEC)
data(dog)
res <- afCEC(dog)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(dog)
plot.afCEC(dog)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(dog)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(res)
plot(res)
library(afCEC)
data(dog)
data(dog)
res<-afCEC(dog,3)
plot(res)
res<-afCEC(dog,3)
plot(res)
res<-afCEC(dog,3)
plot(res)
library(afCEC)
data(dog)
res<-afCEC(dog,10)
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
rgl.points
library(afCEC)
rgl.points
data(dog)
library(afCEC)
data(dog)
res<-afCEC(dog,10)
plot(res)
rgl.points
data(rabbit)
res<-afCEC(rabbit,5,numberOfStarts=1)
res
plot(res)
library(afCEC)
plot(res)
plot(res)
library(afCEC)
plot(res)
library(afCEC)
plot(res)
library(afCEC)
library(afCEC)
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
plot(dog)
library(afCEC)
plot(res)
data(rabbit)
res<-afCEC(rabbit,7,numberOfStarts=1)
res
plot(res)
plot(res)
library(afCEC)
library(afCEC)
rgl.points
library(afCEC)
library(afCEC)
rgl.points
library(afCEC)
rgl.points
data(airplane)
res<-afCEC(airplane,23,numberOfStarts=1)
librar(afCEC(
)
xc
csd
library(afCEC)
library(afCEC)
afCEC
data(airplane)
res<-afCEC(airplane,23,numberOfStarts=1)
res
plot(res)
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
rgl.points
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
data(cat)
res<-afCEC(cat,4)
plot(cat)
plot(res)
plot(cat)
plot(res)
res<-afCEC(cat,12)
plot(res)
2+2
res
plot(res)
res<-afCEC(cat,12,numberOfStarts=100)
res
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
data(airplane)
data(airplane)
res<-afCEC(airplane,17)
res
plot(res)
library(afCEC)
library(afCEC)
data(dog)
plot(dog)
res<-afCEC(dog,5)
res<-afCEC(dog,5)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
2+2
plot(dog)
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
library(afCEC)
data(cat)
plot(cat)
res<-afCEC(cat,14,numberOfStarts=10)
2+2
plot(res)
res<-afCEC(cat,14,numberOfStarts=100)
2+2
plot(res)
library(afCEC)
data(dog)
res<-afCEC(dog,5)
2+2
plot(res)
library(afCEC)
library(afCEC)
library(afCEC)
data(dog)
library(afCEC);
data(dog);
res<afCEC(dog,10,interactive=TRUE);
for (i=1:length(res)) {
plot(res[[i]]);
}
for (i in 1:length(res)) {
plot(res[[i]]);
}
res
length(res)
plot(res[[1]])
res[[1]]
plot(res)
library(afCEC);
data(dog);
res<afCEC(dog,10,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
library(afCEC);
data(dog);
res<afCEC(dog,10,interactive=TRUE);
library(afCEC);
data(dog);
res<-afCEC(dog,10,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
library(afCEC);
data(dog);
res<-afCEC(dog,10,cardMin=0.05,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
length(res)
res[[100]]$number_of_clusters
res[[100]]$cardinalities
library(afCEC);
data(dog);
res<-afCEC(dog,10,cardMin=0.5,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
library(afCEC);
data(dog);
res<-afCEC(dog,10,cardMin=0.5,numberOfStarts=1,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
library(afCEC);
data(dog);
res<-afCEC(dog,10,cardMin=0.5,numberOfStarts=1,interactive=TRUE);
for (i in 1:length(res)) {
plot(res[[i]]);
}
